#!/bin/sh

# Work that should be performed: 
# 
# Each stimulus must be named with speaker-vowel-context
# e.g. L1-an-ban.wav
# e.g. L1-an-an.wav
# e.g. L1-an-man.wav
# All of them should be placed in a single directory.

# The processing sequence is configured to generate a factorial
# combination of all conditions of number of channels * amplitude
# modulation frequency cutoffs.

# Traitement des stimuli
# Conversion au traitement en Matlab (Vocoder Etienne)
#gawk 'BEGIN { FS=";"; OFS=""; split("1;2;4;6;8;12;16;22;32",nbbands); split("4;16;32;64;128",freqc) } NR<=1 {next} { for (i in nbbands) { for (j in freqc) { print "[s,err] = stat(\"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav\"); if (err == 0), disp(\"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav done\"); else disp(\"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav: processing\"); [x,fs] = auload(\"sons/Seg_consonnes/"$9".wav\"); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); p.synth.carrier = \"noise\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = true; [y, fs] = vocode(x, fs, p); y = zeroends(y,fs); y = normalize(y,.8,\"max\"); wavwrite(y,fs,\"processed/C/",$9,"-",nbbands[i],"bands-fc-",freqc[j],".wav\"); end" }}}' < liste-C-finale.csv > traitementStimuliC-noise.m
#gawk 'BEGIN { FS=";"; OFS=""; split("1;2;4;6;8;12;16;22;32",nbbands); split("4;16;32;64;128",freqc) } NR<=1 {next} { for (i in nbbands) { for (j in freqc) { print "[s,err] = stat(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav\"); if (err == 0), disp(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav done\"); else disp(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav: processing\"); [x,fs] = auload(\"sons/voyelles_cut/"$4".wav\"); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); p.synth.carrier = \"noise\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = true; [y, fs] = vocode(x, fs, p); y = zeroends(y,fs);  y = normalize(y,.8,\"max\"); wavwrite(y,fs,\"processed/V/",$4,"-",nbbands[i],"bands-fc-",freqc[j],".wav\"); end" }}}' < liste-V-finale.csv > traitementStimuliV-noise.m
#gawk 'BEGIN { FS=";"; OFS=""; split("1;2;4;6;8;12;16;22;32",nbbands); split("4;16;32;64;128",freqc) } NR<=1 {next} { for (i in nbbands) { for (j in freqc) { print "[s,err] = stat(\"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav\"); if (err == 0), disp(\"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav done\"); else disp(\"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav: processing\"); [x,fs] = auload(\"sons/Seg_consonnes/"$9".wav\"); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); p.synth.carrier = \"sin\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = false; [y, fs] = vocode(x, fs, p); y = zeroends(y,fs); y = normalize(y,.8,\"max\"); wavwrite(y,fs,\"processed/C/",$9,"-",nbbands[i],"bands-fc-",freqc[j],".wav\"); end" }}}' < liste-C-finale.csv > traitementStimuliC-tone.m
#gawk 'BEGIN { FS=";"; OFS=""; split("1;2;4;6;8;12;16;22;32",nbbands); split("4;16;32;64;128",freqc) } NR<=1 {next} { for (i in nbbands) { for (j in freqc) { print "[s,err] = stat(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav\"); if (err == 0), disp(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav done\"); else disp(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav: processing\"); [x,fs] = auload(\"sons/voyelles_cut/"$4".wav\"); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); p.synth.carrier = \"sin\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = false; [y, fs] = vocode(x, fs, p); y = zeroends(y,fs);  y = normalize(y,.8,\"max\"); wavwrite(y,fs,\"processed/V/",$4,"-",nbbands[i],"bands-fc-",freqc[j],".wav\"); end" }}}' < liste-V-finale.csv > traitementStimuliV-tone.m


# split(["Adrien_CValongée;Julien_CVallongée;Juliette_CVallongée;Paul_CValongée;Samantha_CVallongée;Sarah_CVallongée", speaker]);

# Noise carriers
#gawk 'BEGIN { FS=";"; OFS=""; print "gaudrain_path = \"~/work/src/github/others/vocoder/\"; olivier_path = \"~/work/lib/matlab/perso/speech/\"; addpath(gaudrain_path, olivier_path);\n"; split("1;2;4;8;22",nbbands); split("4;16;128",freqc) } NR<=0 {next} { for (i in nbbands) { for (j in freqc) { print "[s] = exist(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-NoiseCarrier.wav\"); if (s ~= 0), disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-NoiseCarrier.wav done\"); else disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-NoiseCarrier.wav: processing\"); [sound, fs] = audioread(\"signaux/02-extraction-CV-maintien/all/"$1".wav\"); tfs = 16000; tx = linspace(0, length(sound)/fs, length(sound)); if (fs ~= tfs), sound = resample(sound, tx, tfs); ofs = fs; fs = tfs; end; ctypes = [\"noise\", \"sin\", \"low_noise\", \"phsc\"]; ctype = ctypes(1); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); if strcmp(ctype, \"noise\"), p.synth.carrier = \"noise\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = true; else, p.synth.carrier = \"sin\"; p.synth.filter_before = false; p.synth.filter_after  = false; end; [y, fs] = vocode(sound, fs, p); y = zeroends(y,fs); y = normalize(y,.8,\"max\"); audiowrite(\"processed/CV/",$1,"-",nbbands[i],"bands-fc-",freqc[j],"-NoiseCarrier.wav\", y, tfs); end\n" }}}' < signaux/02-extraction-CV-maintien/all/liste-CV-finale.txt > traitementStimuliCV_noise.m
#gawk 'BEGIN { FS=";"; OFS=""; print "gaudrain_path = \"~/work/src/github/others/vocoder/\"; olivier_path = \"~/work/lib/matlab/perso/speech/\"; addpath(gaudrain_path, olivier_path);\n"; split("1;2;4;8;22",nbbands); split("4;16;128",freqc) } NR<=0 {next} { for (i in nbbands) { for (j in freqc) { print "[s] = exist(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-NoiseCarrier.wav\"); if (s ~= 0), disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-NoiseCarrier.wav done\"); else disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-NoiseCarrier.wav: processing\"); [sound, fs] = audioread(\"signaux/02-extraction-CV-maintien/all/"$1".wav\"); tfs = 16000; tx = linspace(0, length(sound)/fs, length(sound)); if (fs ~= tfs), sound = resample(sound, tx, tfs); ofs = fs; fs = tfs; end; ctypes = [\"noise\", \"sin\", \"low_noise\", \"phsc\"]; ctype = ctypes(1); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); if strcmp(ctype, \"noise\"), p.synth.carrier = \"noise\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = true; else, p.synth.carrier = \"sin\"; p.synth.filter_before = false; p.synth.filter_after  = false; end; [y, fs] = vocode(sound, fs, p); audiowrite(\"processed/CV/",$1,"-",nbbands[i],"bands-fc-",freqc[j],"-NoiseCarrier.wav\", y, tfs); end\n" }}}' < signaux/02-extraction-CV-maintien/all/liste-CV-finale.txt > traitementStimuliCV_noise.m
gawk 'BEGIN { FS=";"; OFS=""; print "gaudrain_path = \"~/work/src/github/others/vocoder/\"; olivier_path = \"~/work/lib/matlab/perso/speech/\"; addpath(gaudrain_path, olivier_path);\n"; split("1;4;8;12;16;22",nbbands); split("4;16;128",freqc) } NR<=0 {next} { for (i in nbbands) { for (j in freqc) { print "[s] = exist(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-NoiseCarrier.wav\"); if (s ~= 0), disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-NoiseCarrier.wav done\"); else disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-NoiseCarrier.wav: processing\"); [sound, fs] = audioread(\"signaux/02-extraction-CV-maintien/all/"$1".wav\"); tfs = 16000; tx = linspace(0, length(sound)/fs, length(sound)); if (fs ~= tfs), sound = resample(sound, tx, tfs); ofs = fs; fs = tfs; end; ctypes = [\"noise\", \"sin\", \"low_noise\", \"phsc\"]; ctype = ctypes(1); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); if strcmp(ctype, \"noise\"), p.synth.carrier = \"noise\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = true; else, p.synth.carrier = \"sin\"; p.synth.filter_before = true; p.synth.filter_after  = true; end; [y, fs] = vocode(sound, fs, p); y = zeroends(y,fs); y = normalize(y,.8,\"max\"); audiowrite(\"processed/CV/",$1,"-",nbbands[i],"bands-fc-",freqc[j],"-NoiseCarrier.wav\", y, tfs); end\n" }}}' < signaux/02-extraction-CV-maintien/all/liste-CV-finale.txt > traitementStimuliCV_noise.m

gawk 'BEGIN { FS=";"; OFS=""; print "gaudrain_path = \"~/work/src/github/others/vocoder/\"; olivier_path = \"~/work/lib/matlab/perso/speech/\"; addpath(gaudrain_path, olivier_path);\n"; split("1;4;8;12;16;22",nbbands); split("4;16;128",freqc) } NR<=0 {next} { for (i in nbbands) { for (j in freqc) { print "[s] = exist(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-ToneCarrier.wav\"); if (s ~= 0), disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-ToneCarrier.wav done\"); else disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]"-ToneCarrier.wav: processing\"); [sound, fs] = audioread(\"signaux/02-extraction-CV-maintien/all/"$1".wav\"); tfs = 16000; tx = linspace(0, length(sound)/fs, length(sound)); if (fs ~= tfs), sound = resample(sound, tx, tfs); ofs = fs; fs = tfs; end; ctypes = [\"noise\", \"sin\", \"low_noise\", \"phsc\"]; ctype = ctypes(2); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); if strcmp(ctype, \"noise\"), p.synth.carrier = \"noise\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = true; else, p.synth.carrier = \"sin\"; p.synth.filter_before = false; p.synth.filter_after  = false; end; [y, fs] = vocode(sound, fs, p); y = zeroends(y,fs); y = normalize(y,.8,\"max\"); audiowrite(\"processed/CV/",$1,"-",nbbands[i],"bands-fc-",freqc[j],"-ToneCarrier.wav\", y, tfs); end\n" }}}' < signaux/02-extraction-CV-maintien/all/liste-CV-finale.txt > traitementStimuliCV_tone.m

# Do the same for the VCV stimli
# Do the same for V-only extracts on the CV stimuli


#gawk 'BEGIN { FS=";"; OFS=""; split("1;2;4;6;8;12;16;22;32",nbbands); split("4;16;32;64;128",freqc) } NR<=1 {next} { for (i in nbbands) { for (j in freqc) { print "[s,err] = stat(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav\"); if (err == 0), disp(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav done\"); else disp(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav: processing\"); [x,fs] = auload(\"sons/voyelles_cut/"$4".wav\"); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); p.synth.carrier = \"noise\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = true; [y, fs] = vocode(x, fs, p); y = zeroends(y,fs);  y = normalize(y,.8,\"max\"); wavwrite(y,fs,\"processed/V/",$4,"-",nbbands[i],"bands-fc-",freqc[j],".wav\"); end" }}}' < liste-V-finale.csv > traitementStimuliV-noise.m

#gawk 'BEGIN { FS=";"; OFS=""; split("1;2;4;6;8;12;16;22;32",nbbands); split("4;16;32;64;128",freqc) } NR<=1 {next} { for (i in nbbands) { for (j in freqc) { print "[s,err] = stat(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]".wav\"); if (err == 0), disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]".wav done\"); else disp(\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]".wav: processing\"); [x,fs] = auload(\"sons/Seg_consonnes/"$1".wav\"); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); p.synth.carrier = \"sin\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = false; [y, fs] = vocode(x, fs, p); y = zeroends(y,fs); y = normalize(y,.8,\"max\"); wavwrite(y,fs,\"processed/C/",$1,"-",nbbands[i],"bands-fc-",freqc[j],".wav\"); end" }}}' < liste-C-finale.csv > traitementStimuliC-tone.m

#gawk 'BEGIN { FS=";"; OFS=""; split("1;2;4;6;8;12;16;22;32",nbbands); split("4;16;32;64;128",freqc) } NR<=1 {next} { for (i in nbbands) { for (j in freqc) { print "[s,err] = stat(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav\"); if (err == 0), disp(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav done\"); else disp(\"processed/"$4"-"nbbands[i]"bands-fc-"freqc[j]".wav: processing\"); [x,fs] = auload(\"sons/voyelles_cut/"$4".wav\"); p = struct(); p.analysis_filters  = filter_bands([100, 7000], ",nbbands[i],", fs, \"greenwood\", 1.5); p.synthesis_filters = p.analysis_filters; p.envelope = struct(); p.envelope.method = \"low-pass\"; p.envelope.rectify = \"half-wave\"; p.envelope.order = 2; p.envelope.fc = ",freqc[j],"; p.synth = struct(); p.synth.carrier = \"sin\"; p.random_seed = sum(100*clock); p.synth.filter_before = false; p.synth.filter_after = false; [y, fs] = vocode(x, fs, p); y = zeroends(y,fs);  y = normalize(y,.8,\"max\"); wavwrite(y,fs,\"processed/V/",$4,"-",nbbands[i],"bands-fc-",freqc[j],".wav\"); end" }}}' < liste-V-finale.csv > traitementStimuliV-tone.m









#gawk 'BEGIN { FS=";"; split("1;2;3;4;6;8",nbbands); split("16;64;256",freqc) } NR<=1 {next} { for (i in nbbands) { for (j in freqc) { print "[x,fs] = wavread(\""$1".wav\"); y = bandvocoder(x,fs,"nbbands[i]",\"fir\",\"lpnoise\","freqc[j]"); y = zeroends(y,fs); wavwrite(y,fs,\"processed/"$1"-"nbbands[i]"bands-fc-"freqc[j]".wav\"); end"}}}' < liste-manon-C.csv > traitementstimuli.m

#gawk 'BEGIN { FS=";"; OFS=";"; split("1;2;3;4;6;8",nbbands); split("16;64;256",freqc) } { for (i in nbbands) { for (j in freqc) { NR<=1 {next} { print $9".wav",nbbands[i],freqc[j],"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav",$0 }}}}' < liste-manon-C.csv > expe-manon-C.conf
#gawk 'BEGIN { FS=";"; OFS=";"; split("1;2;3;4;6;8",nbbands); split("16;64;256",freqc) } NR<=1 {next} { for (i in nbbands) { for (j in freqc) { print "[s,err] = stat(\"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav\"); if (err == 0), disp:(\"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav done\"); else disp(\"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav\": processing\"); [x,fs] = wavread(\"sons/Seg_consonnes/"$9".wav\");",nbbands[i],freqc[j],"processed/"$9"-"nbbands[i]"bands-fc-"freqc[j]".wav",$0 }}}' < liste-manon-C.csv > expe-manon-C.conf




# awk 'NR>1' file
# awk 'NR<=1 {next} {statements}' < filename
## gawk 'NR<50 {next} {print $0}' < liste-manon-C.csv 
